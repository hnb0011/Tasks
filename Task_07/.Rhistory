dir.create (testdir)
dir.create ("testdir")
setwd ("testdir")
file.create("mytest.R")
list.files()
file.exists ("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3") recursive=TRUE)
dir.create(file.path('testdir2', 'testdir3') recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
1:20
pi:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length (my_seq)
1:length(my_seq)
V
seq(along.with = my_seq)
seq_along(my_seq)
rep (0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0,1,2), each=10)
c(44, NA, 5, NA) <- x
x <- c(44, NA, 5, NA)
x^3
x*3
y <- rnorm (1000)
z <- rep (NA, 1000)
my_data <- sample(c(y,z), 100)
is.na (my_data)
my_na <- is.na (my_data)
my_na
my_data == NA
sum (my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x [!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names (vect)
vect2 <- c(11, 2, NA)
(vect2) <- c("foo", "bar", "norf")
names (vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect ["bar"]
vect[c("foo", "bar")]
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length (my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes (my_vector)
my_vector
class (my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix (1:20, 4:5)
identical (my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <-  data.frame(patients, my_matrix)
my_data
class (my_data)
cnames <- c("patient", "age", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
true == true
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
(6 < 7) == TRUE
6 < 7
10 <= 10
5 != 7
(5=7) <- !TRUE
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical ('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which (ints > 7)
any (ints < 0)
all (ints > 0)
Sys.Date()
mean (c(2, 4, 5)
mean (c(2, 4, 5)
mean (c(2, 4, 5)
mean (c(2, 4, 5)
mean (c(2, 4, 5)
mean (c(2, 4, 5)
mean (c(2, 4, 5)
mean (c(2, 4, 5)
mean (c(2, 4, 5))
boring_function
submit(boring_function)
submit()
boring_function ('My first function!')
boring_function
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate (c(1.4, 3.6, 7.9, 8.8)
)
evaluate (c(1.4, 3.6, 7.9, 8.8))
func (c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(stdev, c(1.4, 3.6, 7.9, 8.8))
evaluate(1.4, 3.6, 7.9, 8.8)
evaluate(sd c(1.4, 3.6, 7.9, 8.8))
evaluate(sd 1.4, 3.6, 7.9, 8.8)
evaluate(sd, 1.4, 3.6, 7.9, 8.8)
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate (function (x) {x+1}, 6)
evaluate (function (x) {x+1}, c(8,4,0))
evaluate (function (x), c(8,4,0))
evaluate (function (x) c(8,4,0))
evaluate ((x) c(8,4,0))
evaluate (x, c(8,4,0))
evaluate ((x), c(8,4,0))
evaluate (function (x){x[1]}, c(8,4,0))
evaluate (function (x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit ()
telegram("Hello!")
submit ()
submit ()
submit ()
submit ()
submit ()
mad_libs ("Beckley", "blue", "building")
submit ()
submit ()
submit ()
submit ()
submit ()
submit ()
submit ()
submit ()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot (cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, main="My Plot")
plot(cars, main-"My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot (cars, col=2)
plot (cars, xlim=c(10,15))
plot (cars, pch=2)
mtcars
data(mtcars)
?boxplot
boxplot (formula=mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
q()
trueMean1 <-5
trueSD1 <- 5
population1 <- rnorm (1e6, trueMean1, trueSD1)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
trueMean1 <-5
trueSD1 <- 5
population1 <- rnorm (1e6, trueMean1, trueSD1)
trueMean2 <-4
trueSD2 <- 5
population2 <- rnorm (1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
Brenda <- makeBaby (MatGrandma, MatGrandpa)
trueMean1 <-5
trueSD1 <- 5
population1 <- rnorm (1e6, trueMean1, trueSD1)
trueMean2 <-4
trueSD2 <- 5
population2 <- rnorm (1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder ("grandma_mom")
MatGrandpa <- makeFounder (" grandpa_mom")
PatGrandma <- makeFounder ("grandma_da")
PatGrandpa <- makeFounder ("grandpa_da")
Alan <- makeBaby (PatGrandma , PatGrandpa)
Brenda <- makeBaby (MatGrandma, MatGrandpa)
Focus <- makeBaby (Brenda, Alan)
head(MatGrandma)
head(MatGrandpa)
head(PatGrandma)
head(PatGrandpa)
head(Alan)
head(Brenda)
head(Focus)
ToMom <- length (grep("mom", Focus )) / length (Focus)
head(ToMom)
ToMomMom <- length (grep("grandma_mom", Focus ))/ length (Focus)
ToMomDad <- length (grep("grandpa_mom", Focus ))/ length (Focus)
head(ToMomMom)
head(ToMomDad)
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01))/ length (Focus)
head(ToSib)
ManySiblings <- replicate (1e3, length (intersect (Focus, makeBaby (Brenda, Alan)))/ length (Focus))
head(ManySiblings)
quantile (ManySiblings)
mean (ManySiblings)
plot(density(ManySiblings), main="", xlab='proportion shared genes")
l
plot(density(ManySiblings), main="", xlab='proportion shared genes')
plot(density(ManySiblings), main="", xlab='proportion shared genes')
HWE <- function (p) {
aa <- p^2
ab <- 2*p* (1-p)
bb <- (1-p)^2
return (c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot (1, 1, type="n", xlim=c(0, 1), ylim=c(0, 1), xlab="frex. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p, HEW))
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[, "ab"], lwd=2, col="purple")
lines(p, GenoFreq[, "bb"], lwd=2, col="blue")
legend( "top ", legend=c ("aa", "ab", "bb") , col=c("red", "purple", "blue"), lty=1, lwd=2, bty="n")
plot (1, 1, type="n", xlim=c(0, 1), ylim=c(0, 1), xlab="frex. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[, "ab"], lwd=2, col="purple")
lines(p, GenoFreq[, "bb"], lwd=2, col="blue")
legend( "top ", legend=c ("aa", "ab", "bb") , col=c("red", "purple", "blue"), lty=1, lwd=2, bty="n")
legend("top", legend=c("aa","ab","bb") , col=c("red", "purple", "blue"), lty=1, lwd=2, bty="n")
Pop <- simPop(500)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop <- simPop(50)
points (Pop[,"freqa"], Pop [,"Genotypes.aa"]/50, pch=22, bg="red")
install.packages('learnPopGen')
library (learnPopGen)
x<- genetic.drift(Ne=200, nrep=5, pause=0.01)
x<- genetic.drift(Ne=1000, nrep=5, pause=0.01)
x<- genetic.drift(Ne=10, nrep=5, pause=0.01)
x<- genetic.drift(Ne=50000, nrep=5, pause=0.01)
x<- genetic.drift(Ne=10000, nrep=5, pause=0.01)x<- genetic.drift(Ne=10000, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply (Samples, function(x) nrow(simPop(x, 500)))
head(tExt)
Line <- lm(tExt~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
Line2 <- lm(tExt ~Samples + 0 )
rlm (x)
rlm (Line, Line2)
rlm(Line)
?rlm
plot(rlm(Samples, tExt))
q()
Line$coef
 if(require('sandwich'))
+ vcovHC(Line, type = "HC")
install.packages('sandwich')
library(sandwich)
Line$coef
if(require('sandwich'))
+ vcovHC(Line, type = "HC")
trueMean1 <-5
trueSD1 <- 5
population1 <- rnorm (1e6, trueMean1, trueSD1)
trueMean2 <-4
trueSD2 <- 5
population2 <- rnorm (1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder ("grandma_mom")
MatGrandpa <- makeFounder (" grandpa_mom")
PatGrandma <- makeFounder ("grandma_da")
PatGrandpa <- makeFounder ("grandpa_da")
Alan <- makeBaby (PatGrandma , PatGrandpa)
Brenda <- makeBaby (MatGrandma, MatGrandpa)
Focus <- makeBaby (Brenda, Alan)
head(MatGrandma)
head(MatGrandpa)
head(PatGrandma)
head(PatGrandpa)
head(Alan)
head(Brenda)
head(Focus)
ToMom <- length (grep("mom", Focus )) / length (Focus)
head(ToMom)
ToMomMom <- length (grep("grandma_mom", Focus ))/ length (Focus)
ToMomDad <- length (grep("grandpa_mom", Focus ))/ length (Focus)
head(ToMomMom)
head(ToMomDad)
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01))/ length (Focus)
head(ToSib)
ManySiblings <- replicate (1e3, length (intersect (Focus, makeBaby (Brenda, Alan)))/ length (Focus))
head(ManySiblings)
quantile (ManySiblings)
mean (ManySiblings)
plot(density(ManySiblings), main="", xlab='proportion shared genes')
Q: The range of values is due to the unequal distribution of genes starting back at the grandparents and trickling down through each generation.
HWE <- function (p) {
aa <- p^2
ab <- 2*p* (1-p)
bb <- (1-p)^2
return (c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot (1, 1, type="n", xlim=c(0, 1), ylim=c(0, 1), xlab="frex. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[, "ab"], lwd=2, col="purple")
lines(p, GenoFreq[, "bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb") , col=c("red", "purple", "blue"), lty=1, lwd=2, bty="n")
Pop <- simPop(500)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop <- simPop(50)
points (Pop[,"freqa"], Pop [,"Genotypes.aa"]/50, pch=22, bg="red")
library (learnPopGen)
install.packages('learnPopGen')
library (learnPopGen)
x<- genetic.drift(Ne=200, nrep=5, pause=0.01)
x<- genetic.drift(Ne=1000, nrep=5, pause=0.01)
x<- genetic.drift(Ne=10, nrep=5, pause=0.01)
x<- genetic.drift(Ne=10000, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply (Samples, function(x) nrow(simPop(x, 500)))
head(tExt)
Line <- lm(tExt~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
Line2 <- lm(tExt ~Samples + 0 )
rlm (Line, Line2)
plot(rlm(Samples, tExt))
Line$coef
if(require('sandwich'))
+ vcovHC(Line, type = "HC")
install.packages('sandwich')
library(sandwich)
Line$coef
if(require('sandwich'))
+ vcovHC(Line, type = "HC")
?lmtest
?lm
install.packages('lmtest')
library(lmtest)
Line
Summary(Line)
bp(Line)
bptest(Line)
q()
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h= 1, s = 0)
plot (1:nrow(Pop1), Pop1 [,1], ylim=c(0,1), type = "1", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plotFit( nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)plot (1:nrow(Pop1), Pop1 [,1], ylim=c(0,1), type = "l", xlab="generation", ylab="allele freq.", lwd=2)
plot (1:nrow(Pop1), Pop1 [,1], ylim=c(0,1), type = "l", xlab="generation", ylab="allele freq.", lwd=2)
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h= 1, s = 0)
plot (1:nrow(Pop1), Pop1 [,1], ylim=c(0,1), type = "l", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plotFit( nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum(((Expectation - Observed) ^2)/Expectation)
barplot(rbind(Expectation, Observed), beside =T, main = bquote(chi^2~ "=" ~. (Chisq)), legend.text=c("expected" , "observed"))
Expectation <- c(10, 10, 10, 10)
Observed <- c(5, 0, 0, 35)
Chisq <- sum(((Expectation - Observed) ^2)/Expectation)
barplot(rbind(Expectation, Observed), beside =T, main = bquote(chi^2~ "=" ~. (Chisq)), legend.text=c("expected" , "observed"))
Expectation <- c(10, 10, 10, 10)
Observed <- c(2, 3, 10, 30)
Chisq <- sum(((Expectation - Observed) ^2)/Expectation)
barplot(rbind(Expectation, Observed), beside =T, main = bquote(chi^2~ "=" ~. (Chisq)), legend.text=c("expected" , "observed"))
Expectation <- c(10, 10, 10, 10)
Observed <- c(5, 5, 5, 5)
Chisq <- sum(((Expectation - Observed) ^2)/Expectation)
barplot(rbind(Expectation, Observed), beside =T, main = bquote(chi^2~ "=" ~. (Chisq)), legend.text=c("expected" , "observed"))
q()
q()
setwd('C:\\Users\\haile\\Desktop\\Evolution\\Tasks\\Task_07')
install.packages("phytools")
install.packages("ape")
library("phytools")
library("ape")
text.string <-
"(((((((cow, pig), whale),(bat,(lemur, human))), (robin, iguana)), coelacanth
), (gold_fish, trout)), shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame='circle', bg='white', cex=1)
vert.tree
str(vert.tree)
tree <- read.tree(text='(((A,B), (C,D)), E);')
plotTree(tree, offset=1)
tiplabels(frame='circle', bg='lightblue', cex=1)
nodelabels(frame='circle', bg='white', cex=1)
tree$tip.label
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre".))
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
par(las=1)
hist(AnolisTree$edge.length, col='black', border='white', main='', xlab='edge lengths for Anolis tree', ylim=c(0,50), xlim=c(0,6))
hist(AnolisTree$edge.length, col='black', border='white', main='', xlab='edge lengths for Anolis tree', ylim=c(0,50), xlim=c(0,6))
tipEdges <- which(AnolisTree$edge[,2] <= Ntip(AnolisTree))
tipEdges
Lengths <- AnolisTree$edge.length
names(Lengths) <- AnolisTree$tip.label
names(Lengths)[which(Lengths == min(Lengths))]
plot(AnolisTree, cex=0.25)
Labs <- sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
tree <- read.tree(text='(((A,B), (C,D)), E);')
plot.phylo(tree, type='phylogram', show.tip.label=FALSE, edge.color='purple')
tree <- read.tree(text='(((A,B), (C,D)), E);')
plot.phylo(tree, type='phylogram', show.tip.label=FALSE, edge.color='green')
plot.phylo(tree, type='radial')
plot.phylo(tree, tip.color = 'red')
plot(AnolisTree, cex=0.25)
Labs <- sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
which(Lengths == min(Lengths))
names(Lengths)
AnolisTree2 <- drop.tip(AnolisTree, 'Anolis_occultus')
plot(AnolisTree2, cex=0.25)
ltt(AnolisTree)
abline(0, 1, lwd=2, col='red', lty=2)
?fit.bd()
plot(AnolisTree2, cex=0.25)
ltt(AnolisTree)
abline(0, 1, lwd=2, col='red', lty=2)
fit.bd(AnolisTree, rho = 0.2)
q()
